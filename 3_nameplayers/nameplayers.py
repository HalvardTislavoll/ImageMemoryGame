#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jan 06, 2024 09:25:41 AM CET  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import nameplayers_support

_bgcolor = 'cornsilk4'
_fgcolor = 'black'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: nameplayers_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'cornsilk-dark.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('cornsilk-dark')
    style.configure('.', font = "TkDefaultFont")
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("666x726+519+149")
        top.minsize(1, 1)
        top.maxsize(3825, 1050)
        top.resizable(0,  0)
        top.title("Toplevel 0")
        top.configure(background="cornsilk4")
        top.configure(highlightbackground="cornsilk4")
        top.configure(highlightcolor="black")

        self.top = top
        self.player1var = tk.StringVar()
        self.player2var = tk.StringVar()
        self.player3var = tk.StringVar()
        self.player4var = tk.StringVar()

        _style_code()
        self.TBtnExit = ttk.Button(self.top)
        self.TBtnExit.place(x=551, y=670, height=35, width=100)
        self.TBtnExit.configure(command=nameplayers_support.on_TBtnExit)
        self.TBtnExit.configure(text='''Exit''')
        self.TBtnExit.configure(compound='left')
        self.TBtnExit_tooltip = \
        ToolTip(self.TBtnExit, '''Exits the program''')

        self.TFrame2 = ttk.Frame(self.top)
        self.TFrame2.place(x=10, y=660, height=55, width=430)
        self.TFrame2.configure(relief='flat')
        self.TFrame2.configure(borderwidth="2")
        self.TFrame2.configure(relief="flat")

        self.TBtnPlayer1 = ttk.Button(self.TFrame2)
        self.TBtnPlayer1.place(x=14, y=10, height=35, width=100)
        self.TBtnPlayer1.configure(command=nameplayers_support.on_TBtnPlayer1)
        self.TBtnPlayer1.configure(text='''Player1''')
        self.TBtnPlayer1.configure(compound='left')
        self.TBtnPlayer1_tooltip = \
        ToolTip(self.TBtnPlayer1, '''Shows the pictures of player number 1''')

        self.TBtnPlayer2 = ttk.Button(self.TFrame2)
        self.TBtnPlayer2.place(x=115, y=10, height=35, width=100)
        self.TBtnPlayer2.configure(command=nameplayers_support.on_TBtnPlayer2)
        self.TBtnPlayer2.configure(text='''Player2''')
        self.TBtnPlayer2.configure(compound='left')
        self.TBtnPlayer2_tooltip = \
        ToolTip(self.TBtnPlayer2, '''Shows the pictures of player number 2''')

        self.TBtnPlayer3 = ttk.Button(self.TFrame2)
        self.TBtnPlayer3.place(x=216, y=10, height=35, width=100)
        self.TBtnPlayer3.configure(command=nameplayers_support.on_TBtnPlayer3)
        self.TBtnPlayer3.configure(text='''Player3''')
        self.TBtnPlayer3.configure(compound='left')
        self.TBtnPlayer3_tooltip = \
        ToolTip(self.TBtnPlayer3, '''Shows the pictures of player number 3''')

        self.TBtnPlayer4 = ttk.Button(self.TFrame2)
        self.TBtnPlayer4.place(x=317, y=10, height=35, width=100)
        self.TBtnPlayer4.configure(command=nameplayers_support.on_TBtnPlayer4)
        self.TBtnPlayer4.configure(text='''Player4''')
        self.TBtnPlayer4.configure(compound='left')
        self.TBtnPlayer4_tooltip = \
        ToolTip(self.TBtnPlayer4, '''Shows the pictures of player number 4''')

        self.TLblLid = ttk.Label(self.TFrame2)
        self.TLblLid.place(x=0, y=0, height=51, width=424)
        self.TLblLid.configure(font="-family {DejaVu Sans} -size 10")
        self.TLblLid.configure(relief="flat")
        self.TLblLid.configure(anchor='w')
        self.TLblLid.configure(justify='left')
        self.TLblLid.configure(compound='left')

        self.TFrame1 = ttk.Frame(self.top)
        self.TFrame1.place(x=10, y=10, height=641, width=642)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")

        self.Canvas2 = tk.Canvas(self.TFrame1)
        self.Canvas2.place(x=221, y=11, height=200, width=200)
        self.Canvas2.configure(background="wheat")
        self.Canvas2.configure(borderwidth="2")
        self.Canvas2.configure(highlightbackground="wheat")
        self.Canvas2.configure(relief="ridge")
        self.Canvas2.configure(selectbackground="#d9d9d9")

        self.Canvas3 = tk.Canvas(self.TFrame1)
        self.Canvas3.place(x=431, y=11, height=200, width=200)
        self.Canvas3.configure(background="wheat")
        self.Canvas3.configure(borderwidth="2")
        self.Canvas3.configure(highlightbackground="wheat")
        self.Canvas3.configure(relief="ridge")
        self.Canvas3.configure(selectbackground="#d9d9d9")

        self.Canvas4 = tk.Canvas(self.TFrame1)
        self.Canvas4.place(x=11, y=221, height=200, width=200)
        self.Canvas4.configure(background="wheat")
        self.Canvas4.configure(borderwidth="2")
        self.Canvas4.configure(highlightbackground="wheat")
        self.Canvas4.configure(relief="ridge")
        self.Canvas4.configure(selectbackground="#d9d9d9")

        self.Canvas5 = tk.Canvas(self.TFrame1)
        self.Canvas5.place(x=221, y=221, height=200, width=200)
        self.Canvas5.configure(background="wheat")
        self.Canvas5.configure(borderwidth="2")
        self.Canvas5.configure(highlightbackground="wheat")
        self.Canvas5.configure(relief="ridge")
        self.Canvas5.configure(selectbackground="#d9d9d9")

        self.Canvas6 = tk.Canvas(self.TFrame1)
        self.Canvas6.place(x=431, y=221, height=200, width=200)
        self.Canvas6.configure(background="wheat")
        self.Canvas6.configure(borderwidth="2")
        self.Canvas6.configure(highlightbackground="wheat")
        self.Canvas6.configure(relief="ridge")
        self.Canvas6.configure(selectbackground="#d9d9d9")

        self.Canvas7 = tk.Canvas(self.TFrame1)
        self.Canvas7.place(x=11, y=431, height=200, width=200)
        self.Canvas7.configure(background="wheat")
        self.Canvas7.configure(borderwidth="2")
        self.Canvas7.configure(highlightbackground="wheat")
        self.Canvas7.configure(relief="ridge")
        self.Canvas7.configure(selectbackground="#d9d9d9")

        self.Canvas8 = tk.Canvas(self.TFrame1)
        self.Canvas8.place(x=221, y=431, height=200, width=200)
        self.Canvas8.configure(background="wheat")
        self.Canvas8.configure(borderwidth="2")
        self.Canvas8.configure(highlightbackground="wheat")
        self.Canvas8.configure(relief="ridge")
        self.Canvas8.configure(selectbackground="#d9d9d9")

        self.Canvas1 = tk.Canvas(self.TFrame1)
        self.Canvas1.place(x=10, y=10, height=200, width=200)
        self.Canvas1.configure(background="wheat")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="wheat")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#d9d9d9")

        self.Canvas9 = tk.Canvas(self.TFrame1)
        self.Canvas9.place(x=431, y=431, height=200, width=200)
        self.Canvas9.configure(background="wheat")
        self.Canvas9.configure(borderwidth="2")
        self.Canvas9.configure(highlightbackground="wheat")
        self.Canvas9.configure(relief="ridge")
        self.Canvas9.configure(selectbackground="#d9d9d9")

        self.TFrame3 = ttk.Frame(self.top)
        self.TFrame3.place(x=10, y=10, height=641, width=642)
        self.TFrame3.configure(relief='groove')
        self.TFrame3.configure(borderwidth="2")
        self.TFrame3.configure(relief="groove")

        self.TLabel1 = ttk.Label(self.TFrame3)
        self.TLabel1.place(x=222, y=111, height=21, width=200)
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='center')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Player 1''')
        self.TLabel1.configure(compound='left')

        self.TLabel2 = ttk.Label(self.TFrame3)
        self.TLabel2.place(x=222, y=225, height=21, width=200)
        self.TLabel2.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='center')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Player 2''')
        self.TLabel2.configure(compound='left')

        self.TLabel3 = ttk.Label(self.TFrame3)
        self.TLabel3.place(x=222, y=335, height=21, width=200)
        self.TLabel3.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='center')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Player 3''')
        self.TLabel3.configure(compound='left')

        self.TLabel4 = ttk.Label(self.TFrame3)
        self.TLabel4.place(x=222, y=456, height=21, width=200)
        self.TLabel4.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='center')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''Player 4''')
        self.TLabel4.configure(compound='left')

        self.TBtnGoOn = ttk.Button(self.TFrame3)
        self.TBtnGoOn.place(x=271, y=586, height=34, width=100)
        self.TBtnGoOn.configure(command=nameplayers_support.on_TBtnGoOn)
        self.TBtnGoOn.configure(text='''Go On''')
        self.TBtnGoOn.configure(compound='left')
        self.TBtnGoOn_tooltip = \
        ToolTip(self.TBtnGoOn, '''Starts the program''')

        self.Label2 = tk.Label(self.TFrame3)
        self.Label2.place(x=199, y=251, height=35, width=35)
        self.Label2.configure(activebackground="#d9d9d9")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="cornsilk4")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#68665a")
        self.Label2.configure(font="-family {DejaVu Sans} -size 10")
        self.Label2.configure(highlightbackground="cornsilk4")
        self.Label2.configure(relief="solid")

        self.Label3 = tk.Label(self.TFrame3)
        self.Label3.place(x=199, y=361, height=35, width=35)
        self.Label3.configure(activebackground="#d9d9d9")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="cornsilk4")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#68665a")
        self.Label3.configure(font="-family {DejaVu Sans} -size 10")
        self.Label3.configure(highlightbackground="cornsilk4")
        self.Label3.configure(relief="solid")

        self.Label4 = tk.Label(self.TFrame3)
        self.Label4.place(x=199, y=481, height=35, width=35)
        self.Label4.configure(activebackground="#d9d9d9")
        self.Label4.configure(anchor='w')
        self.Label4.configure(background="cornsilk4")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#68665a")
        self.Label4.configure(font="-family {DejaVu Sans} -size 10")
        self.Label4.configure(highlightbackground="cornsilk4")
        self.Label4.configure(relief="solid")

        self.Label1 = tk.Label(self.TFrame3)
        self.Label1.place(x=199, y=137, height=35, width=35)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="cornsilk4")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#68665a")
        self.Label1.configure(font="-family {DejaVu Sans} -size 10")
        self.Label1.configure(highlightbackground="cornsilk4")
        self.Label1.configure(relief="solid")

        self.TEntry1 = ttk.Entry(self.TFrame3)
        self.TEntry1.place(x=239, y=137, height=35, width=200)
        self.TEntry1.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry1.configure(textvariable=self.player1var)
        self.TEntry1.configure(cursor="fleur")
        self.TEntry1_tooltip = \
        ToolTip(self.TEntry1, '''Use only letters, capital letter first, no spaces or hyphens''')

        self.TEntry2 = ttk.Entry(self.TFrame3)
        self.TEntry2.place(x=239, y=251, height=35, width=200)
        self.TEntry2.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry2.configure(textvariable=self.player2var)
        self.TEntry2.configure(cursor="fleur")
        self.TEntry2_tooltip = \
        ToolTip(self.TEntry2, '''Use only letters, capital letter first, no spaces or hyphens''')

        self.TEntry3 = ttk.Entry(self.TFrame3)
        self.TEntry3.place(x=239, y=361, height=35, width=200)
        self.TEntry3.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry3.configure(textvariable=self.player3var)
        self.TEntry3.configure(cursor="fleur")
        self.TEntry3_tooltip = \
        ToolTip(self.TEntry3, '''Use only letters, capital letter first, no spaces or hyphens''')

        self.TEntry4 = ttk.Entry(self.TFrame3)
        self.TEntry4.place(x=239, y=481, height=35, width=200)
        self.TEntry4.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry4.configure(textvariable=self.player4var)
        self.TEntry4.configure(cursor="fleur")
        self.TEntry4_tooltip = \
        ToolTip(self.TEntry4, '''Use only letters, capital letter first, no spaces or hyphens''')

        self.TLabel5 = ttk.Label(self.TFrame3)
        self.TLabel5.place(x=15, y=10, height=91, width=614)
        self.TLabel5.configure(font="-family {DejaVu Sans} -size 14 -weight bold")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='center')
        self.TLabel5.configure(justify='center')
        self.TLabel5.configure(text='''Here you can register up to four players''')
        self.TLabel5.configure(compound='left')

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

def start_up():
    nameplayers_support.main()

if __name__ == '__main__':
    nameplayers_support.main()




