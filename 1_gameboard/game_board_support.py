#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jan 01, 2024 10:13:02 PM CET  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import game_board

# Importing other required modules
try:
    import os
    from PIL import Image, ImageTk
    import random
    import shared as sh
except:
    # can't import essential modules
    sys.exit()

_debug = True # False to eliminate debug printing from callback functions.

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = game_board.Toplevel1(_top1)
    game_board_startup()
    root.mainloop()
    
def game_board_startup():
    sh.im_dict = {}
    sh.rnd_im_dict={}
    init_canvas()
    init_path()
    img_number = 9   # set number of images to load
    # make a list of all image names by List Comprehension
    sh.im_lst=[f'{x}.png' for x in range(1,img_number+1)]
    ## print(im_lst)   # ['1.png', '2.png', '3.png', '4.png', '5.png', '6.png', '7.png', '8.png', '9.png', '10.png', '11.png', '12.png', '13.png', '14.png', '15.png', '16.png', '17.png', '18.png', '19.png', '20.png', '21.png', '22.png', '23.png', '24.png', '25.png', '26.png', '27.png', '28.png', '29.png', '30.png', '31.png', '32.png', '33.png', '34.png', '35.png', '36.png']
    init_image_dict()
    sh.rnd_im_dict = dict_randomization(sh.im_dict)
    display_image()

#   ========================================================
#     Init Section
#   ========================================================

def init_canvas():
    sh.can1 = _w1.Canvas1
    sh.can2 = _w1.Canvas2
    sh.can3 = _w1.Canvas3
    sh.can4 = _w1.Canvas4
    sh.can5 = _w1.Canvas5
    sh.can6 = _w1.Canvas6
    sh.can7 = _w1.Canvas7
    sh.can8 = _w1.Canvas8
    sh.can9 = _w1.Canvas9
    sh.canvas_lst = [sh.can1, sh.can2, sh.can3, sh.can4, sh.can5, sh.can6, sh.can7, sh.can8, sh.can9]

def init_path():
    # parent dir path
    sh.path_parent = os.getcwd()
    # photo dir path
    sh.path_photo = sh.path_parent+"/assets/lotto_graphics"

def init_image_dict():
    # make a dict with all images as nparray edition
    sh._img=[]
    global _img
    for inx, im in enumerate(sh.im_lst):
        if inx < 9:
            # join path and filename to photo_location for a photo
            fn = im
            photo_location = os.path.join(sh.path_photo,fn)
            #loading the image 
            original = Image.open(photo_location)
            # Create a thumbnail
            thumbnail_size=(200,200)
            original.thumbnail(thumbnail_size)   # 600x600 -> 200x200
            sh._img.append(inx+1)
            sh._img[inx] = ImageTk.PhotoImage(original)
            # save original to dict
            _img=f'{sh._img[inx]}'
            if not _img in sh.im_dict:
                sh.im_dict[_img] = ImageTk.PhotoImage(original)

#   ========================================================
#     Support Section
#   ========================================================

def dict_randomization(d):
    ''' How To Iterate Over A Python Dictionary In Random Order? 
        To iterate over the dictionary items in random order get 
        the list of items in a tuple with .items() 
        then shuffle and iterate through this list using 
        the shuffle() and make a new dict with the result'''
    rnd_d={}
    items = list(d.items()) # List of tuples of (key,values)
    random.shuffle(items)
    for key, value in items:
        # print(key, ":", value)
        rnd_d[key]=value
    return rnd_d

def display_image():
    num=0
    for key, value in sh.rnd_im_dict.items():
        sh.canvas_lst[num].create_image((100, 100), image=value, anchor='center')   # remember x,y is center of image
        num+=1

#   ========================================================
#     Program Startup
#   ========================================================
if __name__ == '__main__':
    game_board.start_up()
